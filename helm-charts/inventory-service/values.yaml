# Default values for inventory-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Number of pod replicas to run
replicaCount: 1

# Image configuration
image:
  repository: crypticseeds/hotel-inventory-booking-system-inventory-service
  tag: latest

# Image pull secrets for private registries
imagePullSecrets: []             # List of image pull secrets

# Override chart name and fullname
nameOverride: ""                # Override the name of the chart
fullnameOverride: ""            # Override the full name of the chart

# Service account configuration
serviceAccount:
  create: true                  # Specifies whether a service account should be created
  automount: true               # Automatically mount API credentials
  annotations: {}               # Annotations to add to the service account
  name: ""                     # Name of the service account to use (if not set, generated)

# Pod-level annotations and labels
podAnnotations: {}               # Annotations to add to the pod
podLabels: {}                    # Labels to add to the pod

# Pod security context
podSecurityContext: {}           # Security context for the pod
  # fsGroup: 2000

# Container security context
securityContext: {}              # Security context for the container
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Service configuration
service:
  type: NodePort
  port: 8000
  nodePort: 32724

# Ingress configuration
ingress:
  enabled: false                 # Enable ingress
  className: ""                  # Ingress class name
  annotations: {}                # Annotations for ingress
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []                       # TLS configuration
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Resource requests and limits for the container
resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

# Liveness and readiness probes
livenessProbe: {}
readinessProbe: {}

# # Liveness probe configuration
# livenessProbe:
#   httpGet:
#     # path: /healthz
#     path: /
#     port: http
#   initialDelaySeconds: 10
#   periodSeconds: 10
#   timeoutSeconds: 2
#   failureThreshold: 3
#   successThreshold: 1

# # Readiness probe configuration
# readinessProbe:
#   httpGet:
#     # path: /readyz
#     path: /
#     port: http
#   initialDelaySeconds: 5
#   periodSeconds: 10
#   timeoutSeconds: 2
#   failureThreshold: 3
#   successThreshold: 1

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes for the pod
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volume mounts for the container
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# Node selector for pod assignment
nodeSelector: {}

# Tolerations for pod assignment
tolerations: []

# Affinity rules for pod assignment
affinity: {}

# Environment variables for the container
# WARNING: Never commit secrets or sensitive values to version control!
# For production, inject DATABASE_URL via a Kubernetes Secret (e.g., synced from AWS KMS/Secrets Manager):
# For local development, use a .env file or --set on the CLI. Do NOT commit secrets to git!
env: []
# WARNING: Do not commit secrets. For local dev, use a .env file or --set env[0].name=DATABASE_URL --set env[0].value=... on the CLI

envFromSecret:
  - name: DATABASE_URL
    secretName: app-secret
    secretKey: DATABASE_URL
  - name: SENTRY_DSN
    secretName: app-secret
    secretKey: SENTRY_DSN

secrets: []
# - name: DB_PASSWORD
#   secretKeyRef:
#     name: my-db-secret
